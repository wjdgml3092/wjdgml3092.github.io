{"componentChunkName":"component---src-templates-post-template-tsx","path":"/TIL/Closure/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<p>클로저는 와닿지 않는 개념 중 하나다. 하지만 우리가 사용하고있는 React hook 중 useState도 클로저를 적용했단 사실을 아는가? 난 이 사실을 알고 클로저가 좀 더 와닿았다. 전반적인 클로저에 정리, useState를 예시로 작성하고자 한다.</p>\n<h3 id=\"클로저에-대한-이해\" style=\"position:relative;\">클로저에 대한 이해<a href=\"#%ED%81%B4%EB%A1%9C%EC%A0%80%EC%97%90-%EB%8C%80%ED%95%9C-%EC%9D%B4%ED%95%B4\" aria-label=\"클로저에 대한 이해 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>우선, MDN에 정의된 클로저의 정의는 이렇다. <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures\">MDN 정의</a></p>\n<p style=\"text-align: center; color: var(--second-color); font-weight: 700 \">\n A closure is the combination of a function and the lexical environment within which that function was declared.\n <br/>\n클로저는 함수와 그 함수가 선언된 렉시컬 환경과의 조합이다.\n</p>\n<br/>\n클로저를 이해하기 전, 렉시컬 스코프와 실행 컨텍스트를 이해하는 것이 도움이 될 것이다. <br/>\n짧게 설명하자면,\n<ul>\n<li>\n<p><b>렉시컬 스코프(정적 스코프)</b>: 자바스크립트 엔진은 함수를 어디서 호출했는지가 아니라 <span class='highlight'>함수를 어디에 정의</span>했는지에 따라 상위 스코프를 결정한다.</p>\n</li>\n<li>\n<p><b>실행 컨텍스트</b>: 자바스크립트에서 코드가 실행하는데 필요한 환경을 제공하고 이를 관리하는 영역이다.</p>\n<ul>\n<li><b>렉시컬 환경</b>: 식별자와 식별자에 대한 바인딩된 값(<code class=\"language-text\">환경 레코드</code>), 그리고 상위 스코프에 대한 참조를 기록(<code class=\"language-text\">외부 렉시컬 환경에 대한 참조</code>)하는 자료구조로 실행 컨텍스트를 구성하는 컴포넌트다. (<a href=\"https://wjdgml3092.github.io/TIL/ExecutionContext(1)/\">이전 정리했던 실행컨텍스트 글</a>)</li>\n</ul>\n</li>\n<li>\n<p><b> 함수 객체의 내부 슬롯 [[Environment]] </b> : 렉시컬 스코프가 가능하려면 함수 정의가 위치하는 스코프를 기억해야한다. 이를 위해 함수는 자신의 <code class=\"language-text\">내부 슬롯 [[Environment]]</code>에 상위 스코프의 참조를 저장한다.</p>\n<ul>\n<li>함수 정의가 평가되어 함수 객체를 생성할 때 <span class='highlight'> 상위 스코프의 참조를 함수 객체 자신의 내부 슬롯 [[Environment]]에 저장</span>하는데, 저장된 참조는 현재 실행 중인 실행 컨텍스트의 렉시컬 환경의 <span class='highlight'> 외부 렉시컬 환경에 대한 참조에 저장될 참조값</span>이다.</li>\n</ul>\n</li>\n</ul>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">outerFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//외부함수 변수 x</span>\n\n  <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">innerFunc</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//상위 함수의 변수에 접근</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> innerFunc<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> inner <span class=\"token operator\">=</span> <span class=\"token function\">outerFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">inner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10</span></code></pre></div>\n<p><code class=\"language-text\">outerFunc()</code>을 호출 후 지역변수 x와 변수값 10을 저장하고 있던 outerFunc 함수의 실행 컨텍스트는 실행컨텍스트에서 pop되면서, 생명주기는 마감한다. 생명주기가 마감했기 때문에 지역변수 x는 더이상 유효하지 않는 걸로 보이지만. <code class=\"language-text\">inner()</code>를 호출하면 10이 찍힌다.\n<br/></p>\n<blockquote>\n<p>어째서?</p>\n</blockquote>\n<p>위 코드의 <code class=\"language-text\">innerFunc()</code>가 평가될 때를 설명하자면, <br/>\n<code class=\"language-text\">innerFunc()</code> 함수 표현식으로 정의했기 때문에 런타임에 평가된다. <code class=\"language-text\">innerFunc()</code>는 자신의 [[Environment]] 내부 슬롯에 <u>outerFunc 함수의 렉시컬 환경을 상위 스코프로 저장</u>한다. (현재 실행 중인 실행 컨텍스트의 렉시컬 환경 = outerFunc) <br/>\n<code class=\"language-text\">outerFunc()</code>은 <code class=\"language-text\">innerFunc()</code>를 반환하고 생명주기는 종료되지만, <code class=\"language-text\">outerFunc</code>의 렉시컬 환경까지 소멸하는 것은 아니다. 해당 렉시컬 환경은 innerFunc 함수의 [[Environment]] 내부 슬롯에 의해 참조되고 있기 때문에 가비지 컬렉션의 대상이 되지 않는다 ! (가비지 컬렉터는 누군가가 참조하고 있는 메모리를 함부로 해제하지 않는다)\n<span style=\"font-size: 12px;\">뒷 이야기를 하자면, 전역 변수 inner를 호출하면 innerFunc 함수의 실행 컨텍스트가 생성되고 실행 컨텍스트 스택에 푸시되며, 렉시컬 환경의 외부 렉시컬 환경에 대한 참조에는 innerFunc 함수 객체의 [[Environment]] 내부 슬롯에 저장되어 있는 참조값이 할당되겠쥬? </span></p>\n<p><span class='highlight'>이처럼 외부 함수보다 중첩 함수가 더 오래 유지되는 경우, 중첩 함수는 이미 생명 주기가 종료한 외부 함수의 변수를 참조할 수 있다. 중첩 함수를 <b>클로저</b></span>라고 한다. <br/></p>\n<h3 id=\"클로저를-사용하는-이유는\" style=\"position:relative;\">클로저를 사용하는 이유는?<a href=\"#%ED%81%B4%EB%A1%9C%EC%A0%80%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0%EB%8A%94\" aria-label=\"클로저를 사용하는 이유는 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li><b>전역 변수 사용 최소화</b> <br/>\n전역변수가 많으면 의도치 않게 어디에서든 접근하는 상황이 발생할 수 있다. 클로저를 이용하여 전역변수를 최소한으로 사용함으로써 이러한 실수나 예외적인 상황을 방지할 수 있다.</li>\n<li><b>상태 유지</b> (아래 useState로 보자.)</li>\n<li><b>정보은닉</b> <br/>\n변수 값을 은닉하여, private 키워드를 흉내낼 수 있다. <br/>\n(기본적으로 자바스크립트는 접근제한자를 제공하지 않아 모든 프로퍼티와 메서드는 기본적으로 외부에 공개되어 있다.)</li>\n</ul>\n<h3 id=\"클로저를-적용한-useState-구현\" style=\"position:relative;\">클로저를 적용한 useState 구현<a href=\"#%ED%81%B4%EB%A1%9C%EC%A0%80%EB%A5%BC-%EC%A0%81%EC%9A%A9%ED%95%9C-useState-%EA%B5%AC%ED%98%84\" aria-label=\"클로저를 적용한 useState 구현 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>리액트에서 컴포넌트의 렌더링 및 상태를 관리할 수 있도록 useState를 자주 사용했을 것이다.\n상태관리를 하려면, 이전 값을 기억해야한다. 이때 클로저를 적용하여 간단한 구현을 할 수 있다. (원래 리액트 코드는 이보다 더 복잡하다.)</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> React <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> val<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">initVal</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> val <span class=\"token operator\">||</span> initVal\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">setState</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">newVal</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      val <span class=\"token operator\">=</span> newVal\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">Component</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token constant\">C</span> <span class=\"token operator\">=</span> <span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token constant\">C</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token constant\">C</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> render <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>모듈 패턴을 사용해서 React 모듈안에 있는 useState로 구현한 코드다.\n화면에 렌더링 해주기 위해 render 메소드도 추가</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">render</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">add</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> App <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>Component<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span>\nApp<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> App2 <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>Component<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 5</span></code></pre></div>\n<p>state가 유지되며 업데이트가 된다.\n<br/></p>\n<hr>\n<aside style=\"border-color: var(--highlight)\">\n<p>💡 정리</p>\n<ul>\n    <li> MDN 정의에 있는 <u>'그 함수가 선언된 렉시컬 환경'</u>이란 것은 상위 스코프를 의미하는 <u>실행 컨텍스트의 렉시컬 환경</u>을 말한다. \n    </li>\n    <li>\n        자바스크립트의 모든 함수는 렉시컬 스코프에 대한 참조값을 저장한다. 해당 참조값을 통해 외부 함수의 변수에도 접근할 수 있게되는 것이다. <br/>\n        참조값을 어디에 저장하는가? → 자신의 내부 슬롯 [[Environment]]\n    </li>\n    <li> \n        자바스크립트의 모든 함수는 상위 스코프를 기억하므로 이론적으로는 모든 함수가 클로저지만, 중첩함수가 상위 스코프의 식별자를 참조하고 있고, 중첩함수가 외부함수보다 더 오래 유지되는 경우에 한정하는 것이 일반적이다. <br/>\n        <span style=\"font-size: 12px;\">번외) 상위 스코프를 기억해야하므로 불필요한 메모리의 점유를 걱정할 수 있지만, 모던 자바스크립트 엔진은 최적화가 잘되어 있어서 클로저가 참조하고 있지 않는 식별자는 기억하지 않는다. </span>\n    </li>\n</aside>","frontmatter":{"title":"클로저 (feat. useState)","date":"2024.05.29.","category":"TIL","tag":["closure","JS"]}}}]}},"pageContext":{"slug":"/TIL/Closure/"}},"staticQueryHashes":[],"slicesMap":{}}