{"componentChunkName":"component---src-templates-post-template-tsx","path":"/JS/23 실행 컨텍스트 e40f7217b8d445cd8cea6914e42d63df/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<h1>23. 실행 컨텍스트</h1>\n<p>상태: In progress\n날짜: 2023년 9월 25일 → 2023년 9월 26일\n목차: 모던 자바스크립트 Deep Dive (<a href=\"https://www.notion.so/Deep-Dive-9d348d47d6094252981840e852e2a7f3?pvs=21\">https://www.notion.so/Deep-Dive-9d348d47d6094252981840e852e2a7f3?pvs=21</a>)</p>\n<h3>23.1 소스코드의 타입</h3>\n<ul>\n<li>ECMAScript 사양은 소스코드를 4가지 타입으로 구분한다.\n<ul>\n<li>4가지 타입의 소스코드는 실행 컨텍스트를 생성한다.</li>\n</ul>\n</li>\n<li>소스코드의 타입 4가지\n<table>\n<thead>\n<tr>\n<th>소스코드의 타입</th>\n<th>설명</th>\n<th>포함되지 않는 것</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>전역 코드(global code)</td>\n<td>전역에 존재하는 소스코드를 말한다.</td>\n<td>전역에 정의된 함수, 클래스 등의 내부 코드는 포함되지 않는다.</td>\n</tr>\n<tr>\n<td>함수 코드(function code)</td>\n<td>함수 내부에 존재하는 소스코드를 말한다.</td>\n<td>함수 내부에 중첩된 함수, 클래스 등의 내부 코드는 포함되지 않는다.</td>\n</tr>\n<tr>\n<td>eval 코드(eval code)</td>\n<td>빌트인 전역 함수인 eval 함수에 인수로 전달되어 실행되는 소스코드를 말한다.</td>\n<td></td>\n</tr>\n<tr>\n<td>모듈 코드(module code)</td>\n<td>모듈 내부에 존재하는 소스코드를 말한다.</td>\n<td>모듈 내부의 함수, 클래스 등의 내부 코드는 포함되지 않는다.</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>4가지 타입으로 구분하는 이유?\n<ul>\n<li>소스코드의 타입에 따라 실행 컨텍스트를 생성하는 과정과 관리 내용이 다르기 때문이다.</li>\n</ul>\n</li>\n<li>전역 코드\n<ul>\n<li>전역 변수를 관리하기 위해 최상위 스코프인 전역 스코프를 생성해야 한다.</li>\n<li>var키워드로 선언된 전역 변수와 함수 선언문으로 정의된 전역 함수를 전역 객체의 프로퍼티와 메서드로 바인딩하고 참조하기 위해 전역 객체와 연결되어야 한다.</li>\n<li>이를 위해 <strong>전역 코드가 평가되면 전역 실행 컨텍스트</strong>가 생성된다 !</li>\n</ul>\n</li>\n<li>함수 코드\n<ul>\n<li>지역 스코프를 생성하고 지역 변수, 매개변수, arguments 객체를 관리해야한다.</li>\n<li>생성한 지역 스코프를 전역 스코프에서 시작하는 스코프 체인의 일원으로 연결해야 한다.</li>\n<li>이를 위해 <strong>함수 코드가 평가되면 함수 실행 컨텍스트</strong>가 생성된다.</li>\n</ul>\n</li>\n<li>eval 코드\n<ul>\n<li>strict mode에서 자신만의 독자적인 스코프를 생성한다.</li>\n<li>이를 위해 <strong>eval 코드가 평가되면 eval 실행 컨텍스트</strong>가 생성된다.</li>\n</ul>\n</li>\n<li>모듈 코드\n<ul>\n<li>모듈별로 독립적인 모듈 스코프를 생성한다.</li>\n<li>이를 위해 <strong>모듈 코드가 평가되면 모듈 실행 컨텍스트</strong>가 생성된다.</li>\n</ul>\n</li>\n</ul>\n<h3>23.2 소스코드의 평가와 실행</h3>\n<ul>\n<li>자바스크립트 엔진은 소스코드를 2개의 과정으로 나누어 처리한다.\n<ul>\n<li>소스코드의 평가\n<ul>\n<li>실행 컨텍스트를 생성</li>\n<li>변수, 함수 등의 선언문만 먼저 실행</li>\n<li>생성된 변수나 함수 식별자를 키로 실행 컨텍스트가 관리하는 스코프(렉시컬 환경의 환경 레코드)에 등록한다</li>\n</ul>\n</li>\n<li>소스코드의 실행\n<ul>\n<li>소스코드 평가 과정이 끝나면 선언문 제외하고 순차적으로 소스코드가 실행 ⇒ 즉, 런타임이 시작</li>\n<li>소스코드의 실행에 필요한 변수나 함수의 참조를 실행 컨텍스트가 관리하는 스코프에서 검색해서 취득</li>\n<li>변수 값의 변경 등 소스코드의 실행결과는 다시 실행 컨텍스트가 관리하는 스코프 등록한다.\n<img src=\"23%20%E1%84%89%E1%85%B5%E1%86%AF%E1%84%92%E1%85%A2%E1%86%BC%20%E1%84%8F%E1%85%A5%E1%86%AB%E1%84%90%E1%85%A6%E1%86%A8%E1%84%89%E1%85%B3%E1%84%90%E1%85%B3%20e40f7217b8d445cd8cea6914e42d63df/Untitled.png\" alt=\"Untitled\"></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3>23.3 실행 컨텍스트의 역할</h3>\n<ul>\n<li>코드가 실행되려면 다음과 같이 스코프, 식별자, 코드 실행 순서 등의 관리가 필요하다.\n<ul>\n<li>선언에 의해 생성된 모든 식별자(변수, 함수, 클래스 등)를 스코프를 구분하여 등록하고 상태 변화(식별자에 바인딩된 값의 변화)를 <strong>지속적으로 관리</strong>할 수 있어야 한다.</li>\n<li><strong>스코프는 중첩 관계에 위해 스코프 체인을 형성</strong>해야 한다.\n<ul>\n<li>스코프 체인을 통해 상위 스코프로 이동하며 식별자를 검색할 수 있어야 한다.</li>\n</ul>\n</li>\n<li><strong>현재 실행 중인 코드의 실행 순서</strong>를 변경(예를 들어, 함수 호출에 의한 실행 순서 변경)할 수 있어야 하며, 다시 되돌아갈 수도 있어야 한다.</li>\n</ul>\n</li>\n<li><strong>실행 컨텍스트는 소스코드를 실행하는 데 필요한 환경을 제공하고 코드의 실행 결과를 실제로 관리하는 영역이다.</strong></li>\n<li><strong>실행 컨텍스트는 식별자(변수, 함수, 클래스 등의 이름)를 등록하고 관리하는 스코프와 코드 실행 순서 관리를 구현한 내부 메커니즘으로, 모든 코드는 실행 컨텍스트를 통해 실행되고 관리된다.</strong></li>\n<li><strong>식별자와 스코프</strong>는 <code class=\"language-text\">실행 컨텍스트의 렉시컬 환경</code>으로 관리하고</li>\n<li><strong>코드 실행 순서</strong>는 <code class=\"language-text\">실행 컨텍스트 스택</code>으로 관리한다.</li>\n</ul>\n<h3>23.4 실행 컨텍스트 스택</h3>\n<p>Example</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">fun1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> y <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">fun2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> z <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> y <span class=\"token operator\">-</span> z<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">fun2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">fun1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>전역 코드를 평가하여 전역 실행 컨텍스트를 생성해서 실행 컨텍스트 스택에 <code class=\"language-text\">push</code>한다.\n<ul>\n<li>x, fun1이 전역 실행 컨텍스트에 등록</li>\n<li>코드 실행 시작 → x에 값이 할당되고, fun1 호출</li>\n</ul>\n</li>\n<li>fun1이 호출되면 전역 코드의 실행은 중단되면서, 코드의 제어권이 fun1 함수 내부로 이동한다.\n<ul>\n<li>fun1 실행 컨텍스트를 생성하고, 실행 컨텍스트 스택에 <code class=\"language-text\">push</code>한다.</li>\n<li>y, fun2가 fun1 실행 컨텍스트에 등록</li>\n<li>코드 실행 시작 → y에 값 할당, fun2 호출</li>\n</ul>\n</li>\n<li>fun2가 호출되면 fun1 함수 코드의 실행은 중단되면서, 코드의 제어권이 fun2 함수 내부로 이동한다.\n<ul>\n<li>fun2 실행 컨텍스트를 생성하고, 실행 컨텍스트 스택에 <code class=\"language-text\">push</code>한다.</li>\n<li>z가 fun2 실행 컨텍스트에 등록</li>\n<li>코드 실행 시작 → z에 값 할당, console.log 호출 후(콘솔도 함수이므로 실행 컨텍스트 생성하고 스택에 푸시된다!) fun2는 종료된다.</li>\n</ul>\n</li>\n<li>fun2는 실행이 종료되면서 fun1로 이동 → fun2 실행 컨텍스트를 실행 컨텍스트 스택에서 <code class=\"language-text\">pop</code>하여 제거한다.</li>\n<li>fun1이 종료되어 전역 코드로 이동한다. → fun1 실행 컨텍스트를실행 컨텍스트 스택에서 <code class=\"language-text\">pop</code>하여 제거한다.</li>\n<li>전역 코드 또한 남아있는 코드가 없으므로 스택에서 <code class=\"language-text\">pop</code>되어 스택에는 아무것도 남아있지 않게된다.</li>\n</ul>\n<p><img src=\"23%20%E1%84%89%E1%85%B5%E1%86%AF%E1%84%92%E1%85%A2%E1%86%BC%20%E1%84%8F%E1%85%A5%E1%86%AB%E1%84%90%E1%85%A6%E1%86%A8%E1%84%89%E1%85%B3%E1%84%90%E1%85%B3%20e40f7217b8d445cd8cea6914e42d63df/Untitled%201.png\" alt=\"Untitled\"></p>\n<blockquote>\n<p>정리하자면,\n<strong>실행 컨텍스트 스택은 코드의 실행 순서를 관리</strong>한다.\n소스코드가 평가되면서 그에 맞는 실행 컨텍스트가 생성되고 스택에 쌓인다. 실행 컨텍스트의 최상위에 존재하는 실행 컨텍스트는 언제나 현재 실행 중인 코드의 실행 컨텍스트다.\n코드가 실행되는 시간의 흐름에 따라 실행 컨텍스트 스택에 push/pop 된다.</p>\n</blockquote>\n<p>스택은 LIFO다!\n실행컨텍스트 스택 === call stack 이라고 부르기도 한다.</p>\n<blockquote>\n</blockquote>\n<h3>23.5 렉시컬 환경</h3>\n<ul>\n<li>스코프를 구분하여 식별자를 관리하는 저장소 역할을 한다.</li>\n<li>실행 컨텍스트 구성\n<ul>\n<li><code class=\"language-text\">LexicalEnvironment</code> / <code class=\"language-text\">VariableEnvironment</code> 2개의 컴포넌트로 구성되어있다.</li>\n</ul>\n</li>\n<li>LexicalEnvironment 구성\n<ul>\n<li><code class=\"language-text\">Environment Record(환경 레코드)</code> : 스코프에 포함된 식별자를 등록하고 등록된 식별자에 바인딩된 값을 관리하는 저장소</li>\n<li><code class=\"language-text\">Outer Lexical Enviromnment Reference(외부 렉시컬 환경에 대한 참조)</code> : 해당 실행 컨텍스트를 생성한 소스코드를 포함하는 상위 코드의 렉시컬 환경(상위 스코프)을 가리킨다.\n<ul>\n<li>외부 렉시컬 환경에 대한 참조를 통해 단방향 링크드 리스트인 스코프 체인을 구현한다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3>23.6 실행 컨텍스트의 생성과 식별자 검색 과정</h3>\n<ul>\n<li>순서는 간략하게 정리하자면 아래와 같다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\">전역 객체 생성 <span class=\"token operator\">-</span>> 전역 코드 평가 <span class=\"token operator\">-</span>> 전역 코드 실행\n<span class=\"token operator\">-</span>> 함수 코드 평가 <span class=\"token operator\">-</span>> 함수 코드 실행\n<span class=\"token operator\">-</span>> 새로 실행되는 함수가 있다면 앞 단계를 반복 <span class=\"token operator\">-</span>> 종료 시점에 스택에서 pop <span class=\"token operator\">-</span>> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<ol>\n<li>\n<p>전역 객체 생성</p>\n<ul>\n<li>전역 코드가 평가되기 이전에 생성된다.\n<ul>\n<li>전역 객체란?\n<ul>\n<li>빌트인 전역 프로퍼티, 빌트인 전역 함수, 표준 빌트인 객체가 추가되면 동작환경에 따라 클라이언트 사이드 Web API(DOM, fetch 등) 또는 특정 환경을 위한 호스트 객체를 포함한다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Object.prototype을 상속받는다.\n<ul>\n<li>즉, 전역 객체도 프로토타입 체인의 일원이다!</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>전역 코드 평가</p>\n<ul>\n<li>순서\n<ul>\n<li><code class=\"language-text\">Global Execution Context(전역 실행 컨텍스트)</code> 생성\n→ 실행 컨텍스트 스택에 <code class=\"language-text\">push</code></li>\n<li><code class=\"language-text\">Global Lexical Environment(전역 렉시컬 환경)</code> 생성\n→ 렉시컬 환경을 생성하고 전역 실행 컨텍스트에 바인딩한다.\n<ul>\n<li><code class=\"language-text\">GlobalEnvironmentRecord(전역 환경 레코드)</code>생성\n<ul>\n<li><code class=\"language-text\">Object Environment Record(객체 환경 레코드)</code> 생성</li>\n<li><code class=\"language-text\">Declarative Environment Record(선언전 환경 레코드)</code> 생성</li>\n</ul>\n</li>\n<li><code class=\"language-text\">this 바인딩</code>\n→ [[GlobalThisValue]] 내부 슬롯에 this가 바인딩되는데 일반적으로 전역 코드에서 this는 전역 객체를 가리킨다.\n→ this 바인딩은 전역 환경 레코드를 구성하는 객체/선언적 환경 레코드에는 없고, 전역 환경 레코드와 함수 환경 레코드에만 존재한다.</li>\n<li><code class=\"language-text\">Outer Lexical Enviromnment Reference(외부 렉시컬 환경에 대한 참조)</code> 결정\n→ 전역에서는 상위 스코프는 없다. → 즉, 스코프 체인에 종점이므로 null을 할당한다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>전역 환경 레코드에서 왜 2가지로 나눠진걸까?\n<ul>\n<li>전역 변수를 관리하는 전역 스코프, 전역 객체의 빌트인 전역 프로퍼티와 빌트인 전역 함수, 표준 빌트인 객체를 제공한다.</li>\n<li>모든 전역 변수가 전역 객체의 프로퍼티가 되는 ES6 이전에는 전역 객체가 전역 환경 레코드의 역할을 수행했다. (기존의 전역 객체가 관리하던 var 키워드)\n↔ ES6의 let, const키워드로 선언한 전역 변수는 전역 객체의 프로티가 되지 않고 개념적인 블록 내에 존재하게 된다 (개념적인\n⇒ <code class=\"language-text\">객체 환경 레코드</code>는 var 키워드로 선언한 전역 변수(함수 선언문으로 정의한 전역 함수 등)와 <code class=\"language-text\">선언전 환경 레코드</code>는 let/const 키워드로 선언한 전역 변수 로 구분하여 관리하기 위해 2가지로 나뉜다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">BindingObject</code>는 어디서 생성되고, 어디와 연결되는가?\n<ul>\n<li>전역 객체 생성에서 생성된 전역 객체이다.</li>\n<li>var 키워드로 선언한 전역 변수, 함수 선언문의 정의된 전역 함수는 전역 환경 레코드의 객체 환경 레코드에 연결된 <code class=\"language-text\">BindingObject</code>를 통해 <strong>전역 객체의 프로퍼티와 메서드</strong>가 된다!\n⇒ var 키워드로 선언된 전역 변수와 함수 선언문으로 정의된 전역 함수가 전역 객체의 프로퍼티와 메서드가 되고 전역 객체를 가리키는 식별자(window)없이 전역 객체의 프로퍼티를 참조할 수 있는 메커니즘이다. (ex. window.alert를 alert로 참조하는)</li>\n</ul>\n</li>\n<li>var 키워드로 선언한 변수는 선언 단계와 초기화 단계가 동시에 진행된다!\n<ul>\n<li>객체 환경 레코드에 바인딩된 <code class=\"language-text\">bindingObject</code>를 통해 전역 객체에 변수 식별자를 키로 등록한 다음 undeined로 바인딩한다 → 참조 가능(선언문 전에) ⇒ 변수 호이스팅</li>\n</ul>\n</li>\n<li>함수 선언문으로 정의한 함수도 마찬가지로 bindingObject를 통해 키가 등록되고, 생성된 함수 객체를 즉시 할당한다 → 참조,호출 가능(선언문 전에) ⇒ 함수 호이스팅 (변수 호이스팅과 차이)</li>\n<li>const와 let 키워드로 선언한 전역 변수는 전역 객체의 프로퍼티가 되지 않기 때문에 window.y와 같이 전역 객체의 프로퍼티로서 참조할 수 없다.\n<ul>\n<li>const 키워드는 선언과 초기화 단계가 분리되어있어, 런타임에 변수 선언문에 도달하기 전까지 TDZ에 빠지며 <code class=\"language-text\">uninitialized</code>로 바인딩된다. (<code class=\"language-text\">uninitialized</code> : 초기화 단계가 진행되지 않아 변수에 접근할 수 없음을 나타낼 때 사용한다.)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>전역 코드 실행</p>\n<ul>\n<li>코드가 순차적으로 실행되면서 변수 할당문이 실행되어 값을 할당한다.</li>\n<li>이 때, 선언된 식별자인지 확인해야한다.</li>\n<li>식별자가 동일한 이름으로 다른 스코프에 여러개 존재할 수 도 있어, 어느 스코프의 식별자를 참조하면 되는지 결정하는 것을 <strong>식별자 결정</strong> 이라 한다.\n<ul>\n<li>식별자 결정을 위해 식별자를 검색할 때는 실행 중인 실행 컨텍스트에서 식별자를 검색한다\n<ul>\n<li>실행 컨텍스트의 렉시컬 환경의 환경 레코드에 등록되어있다 → 선언되었다면!</li>\n</ul>\n</li>\n<li>검색 시 없다면 상위 스코프로 이동해서 식별자를 검색한다.\n⇒ 스코프 체인의 동작 원리다.</li>\n<li>만약, 전역 환경에서도 없다면 참조 에러를 발생시킨다.</li>\n</ul>\n</li>\n</ul>\n<aside>\n💡 소스코드를 실행하기 위해 필요한 환경을 제공하고 코드의 실행 결과를 실제로 관리하는 영역이다\n⇒ 실행 컨텍스트!!\n</aside>\n</li>\n<li>\n<p>함수 코드 평가</p>\n<ul>\n<li>함수 호출 시 전역 코드의 실행을 일시 중단하고 해당 함수 내부도 코드 제어권이 이동한다.</li>\n<li>순서\n<ul>\n<li><code class=\"language-text\">fun1 Execution Context(fun1 실행 컨텍스트)</code> 생성\n→ 실행 컨텍스트 스택에 <code class=\"language-text\">push</code></li>\n<li><code class=\"language-text\">fun1 Lexical Environment(fun1 렉시컬 환경)</code> 생성\n→ 렉시컬 환경을 생성하고 전역 실행 컨텍스트에 바인딩한다.\n<ul>\n<li><code class=\"language-text\">FunctionEnvironmentRecord(함수 환경 레코드)생성</code>\n→ 매개변수, arguments 객체, 함수 내부에서 선언한 지역 변수와 중첩함수를 등록하고 관리한다.</li>\n<li><code class=\"language-text\">this 바인딩</code>\n→ 일반 함수로 호출되었다면, this는 전역 객체를 가리킨다</li>\n<li><code class=\"language-text\">Outer Lexical Enviromnment Reference(외부 렉시컬 환경에 대한 참조)</code> 결정</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>외부 렉시컬 환경에 대한 참조 결정 시 상위 스코프는 어떻게 아는가?\n<ul>\n<li>자바스크립트는 함수를 어디서 호출했는지가 아니라 어디에 정의했는지에 따라 상위 스코프를 결정한다.</li>\n<li>함수 객체는 자신이 정의된 스코프(상위 스코프)를 기억한다.</li>\n<li>자바스크립트 엔진은 함수 정의를 평가하여 함수 객체를 생성할 때 현재 실행 중인 실행 컨텍스트의렉시컬 환경, 즉 함수의 상위 스코프를 함수 객체의 내부 슬록 [[Environment]]에 저장한다.</li>\n<li>함수 렉시컬 환경의 외부 렉시컬 환경에 대한 참조에 할당되는 것은 바로 함수의 상위 스코프를 가리키는 함수 객체의 내부 슬롯 [[Environment]]에 저장된 렉시컬 환경의 참조다.</li>\n<li>즉, 함수 객체의 내부 슬롯 [[Environment]]가 바로 렉시컬 스코프를 구현하는 메커니즘이다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>함수 코드 실행</p>\n<ul>\n<li>변수 값 할당 등 진행</li>\n</ul>\n</li>\n</ol>\n<p>또 다른 함수를 실행하고 한다면, 함수 코드 평가와 실행을 반복할 것이다.</p>\n<p>더 이상 실행할 코드가 없다면, 해당 함수는 실행이 종료되고 컨텍스트 스택에서 pop 제거된다.</p>\n<p>렉시컬 환경은 실행 컨텍스트에 의해 참조되기는 하지만 독립적인 객체다. 객체를 포함한 모든 값은 누군가에 의해 참조되지 않을 때 비로소 가바리 컬렉터에 의해 메모리 공간의 확보가 해제되어 소멸한다.</p>\n<p>위처럼 pop을 진행하다보면, 실행 컨텍스트 스택에는 아무것도 남이있지 않게 된다.</p>\n<blockquote>\n<p>console.log는 어떻게 처리가 되는가?</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>console 식별자를 스코프 체인에서 검색한다.</li>\n<li>console 식별자는 객체 환경 레코드의 bindingObject를 통해 전역 객체에서 찾을 수 있다.</li>\n<li>console 객체에서 log 메서드를 검색한다.\n<ul>\n<li>console 객체의 프로토타입 체인을 통해 메서드를 검색한다.</li>\n<li>log 메서드는 상속된 프로퍼티가 아니라 console 객체가 직접 소유하는 프로퍼티다.\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">console<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">'log'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>괄호 안에 있는 변수도 스코프 체인에서 검색해서 반환한다.</li>\n</ul>","frontmatter":{"title":"지워","date":"2023.09.26.","categories":["Execution_Context","JS"]}}}]}},"pageContext":{"slug":"/JS/23 실행 컨텍스트 e40f7217b8d445cd8cea6914e42d63df/"}},"staticQueryHashes":[],"slicesMap":{}}