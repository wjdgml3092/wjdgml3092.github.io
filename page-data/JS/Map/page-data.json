{"componentChunkName":"component---src-templates-post-template-tsx","path":"/JS/Map/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<h3>1. 소개</h3>\n<ul>\n<li>Map 객체는 <strong>key-value</strong>로 이루어진 해시 테이블.</li>\n<li>객체와 비슷하지만 차이점 있음.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>객체</th>\n<th>Map 객체</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>키로 사용할 수 있는 값</td>\n<td>문자열 심벌 값</td>\n<td>객체를 포함한 모든 값</td>\n</tr>\n<tr>\n<td>이터러블</td>\n<td>X</td>\n<td>O</td>\n</tr>\n<tr>\n<td>요소 개수 확인</td>\n<td>Object.keys(obj).length</td>\n<td>map.size</td>\n</tr>\n</tbody>\n</table>\n<h3>2. 생성</h3>\n<ul>\n<li>생성은 Map 생성자 함수로 생성.</li>\n<li>파라미터를 전달하지 않으면 <strong>빈 Map객체가 생성</strong>.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>\n<p><strong>이터러블을 파라미터로 전달받아</strong> Map객체를 생성.</p>\n<ul>\n<li>파라미터로 전달되는 이터러블은 <strong>key-value 쌍</strong>으로 이루어진 요소로 구성.</li>\n<li>중복된 키를 갖는 요소가 존재하면 값 덮어씀 -> <strong>중복된 키를 갖는 요소 존재 X</strong></li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> map1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">'key1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'val1'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'key2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'val2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> map2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//TypeError: Iterator value 1 is not an entry object</span></code></pre></div>\n<h3>3. 추가 / 가져오기</h3>\n<ul>\n<li>\n<p>추가</p>\n<ul>\n<li><code class=\"language-text\">Map.prototype.set</code> 메서드 사용.</li>\n<li>set 메서드는 새로운 요소가 추가된 Map 객체를 반환. <br/>\n↳ 해당 메서드를 연속적으로 호출할 수 O</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'jung'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//로그 : Map(1) {\"name\" => \"jung\"}</span>\n\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'job'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'developer'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'25'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//로그 : Map(3) {'name' => 'jung', 'job' => 'developer', 'age' => '25'}</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">NaN === NaN</code> 값은 false. ↔ Map객체에서는 true로 평가하여 중복 추가를 허용하지 않음.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'val'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'val2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//로그 : Map(1) {NaN => 'val2'} NaN이 같다고 판단하여 덮혀씀.</span>\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'val3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'val4'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//로그 : Map(2) {NaN => 'val2', 0 => 'val4'} 0, -0로 마찬가지로 판단하여 덮혀씀.</span></code></pre></div>\n<ul>\n<li>키 타입에 제한 없이 객체를 포함한 모든 값을 키로 사용할 수 있음.\n↔ 객체는 문자열 혹은 심벌 값만 키로 사용 할 수 있음 <br/>\n↳ <strong>Map 객체와 일반 객체의 가장 큰 차이점!</strong>\n<br/></li>\n</ul>\n</li>\n<li>\n<p>가져오기</p>\n<ul>\n<li><code class=\"language-text\">Map.prototype.get</code> 메서드 사용.</li>\n<li>get 메서드는 파라미터로 키를 전달하면 Map객체에서 일치한 키를 갖는 값을 반환. <br/>(키를 갖는 요소가 존재하지 않으면 <code class=\"language-text\">undefined</code> 반환)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'jung'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'25'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//jung</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'job'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//undefined</span></code></pre></div>\n</li>\n</ul>\n<h3>4. 개수 확인 / 존재 여부 / 삭제</h3>\n<ul>\n<li>\n<p>개수 확인</p>\n<ul>\n<li><code class=\"language-text\">Map.prototype.size</code> 프로퍼티 사용.</li>\n<li>size 프로퍼티는 setter 함수 없이 getter함수만 존재하는 접근자 프로퍼티.<br/>\n↳ size 프로퍼티에 숫자를 할당하여 Map 객체의 개수를 변경할 수 없음.\n<br/>\n<span style=\"font-size: 14px\">\n(접근자 프로퍼티: 자체적으로는 값을 갖지 않고 다른 데이터 프로퍼티의 값을 읽거나 저장할 때 사용하는 접근자 함수로 구성된 프로퍼티다.)\n</span></li>\n</ul>\n</li>\n<li>\n<p>존재 여부</p>\n<ul>\n<li><code class=\"language-text\">Map.prototype.has</code> 메서드 사용.</li>\n<li>존재여부를 나타내는 Boolean값 반환.</li>\n</ul>\n</li>\n<li>\n<p>삭제</p>\n<ul>\n<li>단일 삭제\n<ul>\n<li><code class=\"language-text\">Map.prototype.delete</code> 메서드 사용.</li>\n<li>삭제 성공 여부를 나타내는 Boolean값 반환. <br/>\n↳ 반환이 t/f이기 때문에 set 메서드처럼 연속적인 호출은 할 수 없음.</li>\n</ul>\n</li>\n<li>일괄 삭제\n<ul>\n<li><code class=\"language-text\">Map.prototype.clear</code> 메서드 사용.</li>\n<li>언제나 undefined 반환!</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'jung'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'25'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*&lt;-----개수 size------>*/</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>size<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'jung'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'25'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'job'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'developer'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n\n<span class=\"token comment\">/*&lt;-----존재여부 has(key)------>*/</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">'blog'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//false</span>\n\n<span class=\"token comment\">/*&lt;-----삭제 delete(key)------>*/</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//true</span>\n\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">'blog'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//에러 X, 무시</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Map(1) {'age' => '25'}</span>\n\n<span class=\"token comment\">/*&lt;-----일괄 삭제 clear()------>*/</span>\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>5. 반복</h3>\n<ul>\n<li>\n<p><strong>forEach</strong> 메서드 사용.</p>\n<ul>\n<li>첫번째 파라미터: 현재 순회 중인 요소값</li>\n<li>두번째 파라미터: 현재 순회 중인 요소키</li>\n<li>세번째 파라미터: Map 객체 자체</li>\n</ul>\n</li>\n<li>\n<p>Map 객체는 이터러블 👉🏻 <strong>for…of</strong> 가능.</p>\n<ul>\n<li>스프레드 문법, 배열 디스트럭처링 할당의 대상이 될 수 있음.</li>\n</ul>\n</li>\n<li>\n<p>Map 객체는 이터러블이면서 동시에 <strong>이터레이터인 객체를 반환하는 메서드를 제공</strong>함.</p>\n<ul>\n<li><code class=\"language-text\">Map.prototype.keys</code> <code class=\"language-text\">Map.prototype.values</code> <code class=\"language-text\">Map.prototype.entries</code></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> lee <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Lee'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> kim <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Kim'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>lee<span class=\"token punctuation\">,</span> <span class=\"token string\">'designer'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>kim<span class=\"token punctuation\">,</span> <span class=\"token string\">'developer'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*&lt;-----forEach----->*/</span>\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> obj</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\n  designer {name: \"Lee\"} Map(2) {\n  {name: \"Lee\"} => \"designer\",\n  {name: \"Kim\"} => \"developer\"\n  }\n  developer {name: \"Kim\"} Map(2) {\n  {name: \"Lee\"} => \"designer\",\n  {name: \"Kim\"} => \"developer\"\n  }\n*/</span>\n\n<span class=\"token comment\">/*&lt;-----for...of----->*/</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> entry <span class=\"token keyword\">of</span> map<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// [{name: \"Lee\"}, \"designer\"]  [{name: \"Kim\"}, \"developer\"]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 스프레드 문법</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>map<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [[{name: \"Lee\"}, \"designer\"], [{name: \"Kim\"}, \"developer\"]]</span>\n\n<span class=\"token comment\">// 배열 디스트럭처링 할당</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> map<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [{name: \"Lee\"}, \"designer\"]  [{name: \"Kim\"}, \"developer\"]</span>\n\n<span class=\"token comment\">/*&lt;-----Map 메서드----->*/</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> key <span class=\"token keyword\">of</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// {name: \"Lee\"} {name: \"Kim\"}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> value <span class=\"token keyword\">of</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// designer developer</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> entry <span class=\"token keyword\">of</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// [{name: \"Lee\"}, \"designer\"]  [{name: \"Kim\"}, \"developer\"]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n</ul>\n<h3>6. 마무리</h3>\n<p>요약하자면, Map은 다음과 같습니다.</p>\n<ul>\n<li><strong>key-value</strong>로 이루어진 해시 테이블.</li>\n<li><strong>key는</strong> 고유값으로써, <strong>단 한개만 존재</strong>한다.</li>\n<li>key 가능 자료형 : <strong>객체를 포함한 모든 값</strong></li>\n<li>데이터를 <strong>쉽게 접근하고 검사</strong>할 수 있음 👉🏻 get(접근), set(삽입), has(여부) 등</li>\n<li>Object와 달리 <strong>키의 순서를 유지</strong>하고, iteration를 염두에 두고 구축되었다.</li>\n<li><strong>반복 혹은 요소 순서가 매우 중요한 경우 사용하면 안정적인 성능을 보장할 수 있다.</strong></li>\n</ul>\n<br/>\n<p><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Map\">더 알아보기 MDN</a></p>","frontmatter":{"title":"Map","date":"2023.08.08.","categories":["JS"]}}}]}},"pageContext":{"slug":"/JS/Map/"}},"staticQueryHashes":[],"slicesMap":{}}