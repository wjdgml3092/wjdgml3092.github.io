{"componentChunkName":"component---src-templates-post-template-tsx","path":"/Algorithm/Search_Algorithm/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<h3 id=\"1-선형-검색Linear-Search\" style=\"position:relative;\">1. 선형 검색(Linear Search)<a href=\"#1-%EC%84%A0%ED%98%95-%EA%B2%80%EC%83%89Linear-Search\" aria-label=\"1 선형 검색Linear Search permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>검색 방법\n<u>처음부터 해당 값을 찾기위해 맨 끝에 도달할 때까지 계속 확인</u>하는 방법이다.</li>\n<li>자바스크립트에는 선형 검색 기능이 있다.\n<ul>\n<li><code class=\"language-text\">indexOf</code>(찾는 값의 인덱스를 반환), <code class=\"language-text\">includes</code>(찾는 값이 존재하는지) 등 함수</li>\n<li>위 함수들도 내부에서는 모든 요소를 한 번에 하나씩 확인하면서 입력한 것이 있나 확인한다.</li>\n</ul>\n</li>\n<li>코드</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">linearSearch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> val<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>Big O 성능\n<ul>\n<li>Best : O(1)</li>\n<li>Worst : O(n)</li>\n<li>Average : O(n)</li>\n</ul>\n</li>\n<li>선형 검색은 <strong>데이터가 정렬되어 있지 않은 경우 할 수 있는 최선</strong>이다. n 이 커지면 배열의 길이도 길어지고 시간도 늘어난다.</li>\n</ul>\n<h3 id=\"2-이진-검색Binary-Search\" style=\"position:relative;\">2. 이진 검색(Binary Search)<a href=\"#2-%EC%9D%B4%EC%A7%84-%EA%B2%80%EC%83%89Binary-Search\" aria-label=\"2 이진 검색Binary Search permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>검색 방법\n<ul>\n<li>기본적인 개념은 분할정복(dividing and conquering)이다.\n<ul>\n<li>배열을 두 부분으로 나누고,</li>\n<li>중간에 있는 곳에서 찾는 값이 좌측인지 우측인지 확인한다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>분류된 배열을 대상으로만 작동하므로! 데이터가 분류되어있다는 것을 주의해야한다.</li>\n<li>이진 검색이 선형 검색보다 훨씬 빠르다.</li>\n<li>의사 코드\n<ul>\n<li><strong>정렬된 배열</strong>과 <strong>검색할 값을 인수</strong>로 받는다.\n<ul>\n<li><code class=\"language-text\">배열의 시작 부분에 왼쪽 포인터</code>, <code class=\"language-text\">배열의 끝 부분에 오른쪽 포인터,</code> <code class=\"language-text\">중간 포인터</code> 3가지 변수를 선언한다.</li>\n<li>검색한 값과 중앙 포인터의 값이 같지 않으며서 왼쪽 포인터가 오른쪽 포인터 앞에 오는 동안\n<ul>\n<li>값이 크면 오른쪽 포인터를 중앙 포인터의 왼쪽으로 이동</li>\n<li>값이 작으면 왼쪽 포인터를 중앙 포인터의 오른쪽으로 이동</li>\n<li>좌우 포인터의 중간 인덱스로 중앙 포인터를 재설정</li>\n</ul>\n</li>\n<li>검색한 값과 중앙 포인터 값이 같은 경우, 해당 중앙 포인터 반환하고 이외에는 -1 반환</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>코드</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">binarySearch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> start <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> end <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> middle <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>start <span class=\"token operator\">+</span> end<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//floor 사용이유 : 딱 나눠떨어지지 않는 경우에 소수점 버리기 위해</span>\n    <span class=\"token comment\">//예를 들어 길이가 start+end가 5라면 middle은 2.5라면?</span>\n    <span class=\"token comment\">//2.5라는 인덱스는 존재하지 않는다.</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>middle<span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> val <span class=\"token operator\">&amp;&amp;</span> start <span class=\"token operator\">&lt;=</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>val <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">[</span>middle<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> end <span class=\"token operator\">=</span> middle <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> start <span class=\"token operator\">=</span> middle <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        middle <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>start <span class=\"token operator\">+</span> end<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">[</span>middle<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> val <span class=\"token operator\">?</span> middle <span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>Big O 성능\n<ul>\n<li>Worst / Average : O(logn)</li>\n<li>Best : O(1)</li>\n</ul>\n</li>\n<li><strong>정렬만 되어있는 배열이라면</strong> 아주 성능 좋은 검색 알고리즘이다.</li>\n</ul>","frontmatter":{"title":"검색 알고리즘(Search Algorithm)","date":"2023.09.23.","category":"Algorithm","tag":["search_algorithm"]}}}]}},"pageContext":{"slug":"/Algorithm/Search_Algorithm/"}},"staticQueryHashes":[],"slicesMap":{}}