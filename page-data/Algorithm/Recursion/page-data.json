{"componentChunkName":"component---src-templates-post-template-tsx","path":"/Algorithm/Recursion/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<h3 id=\"1-재귀Recursion\" style=\"position:relative;\">1. 재귀(Recursion)<a href=\"#1-%EC%9E%AC%EA%B7%80Recursion\" aria-label=\"1 재귀Recursion permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>재귀는 자기 자신을 호출하는 것이다. 재귀가 되기 위한 조건은 2가지가 있다. <br/></p>\n<ol>\n<li><b>Base Case</b>: 재귀가 종료되는 시점\n↳ base case가 없다면, 에러를 뱉는다. <br/>\n<code class=\"language-text\">Uncaught RangeError: Maximum call stack size exceeded</code> <br/> → 스택 오버플로 발생, 최대 호출 스택 크기를 초과한다.</li>\n<li><b>Different Input</b>: 다른 입력 값 → 함수를 호출할 때마다 다른 입력값으로 호출되어야한다.</li>\n</ol>\n<h3 id=\"2-호출-스택Call-Stack\" style=\"position:relative;\">2. 호출 스택(Call Stack)<a href=\"#2-%ED%98%B8%EC%B6%9C-%EC%8A%A4%ED%83%9DCall-Stack\" aria-label=\"2 호출 스택Call Stack permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>재귀 함수가 자기를 계속 호출하면서 올바른 순서대로 실행이 되어야 한다. 이걸 담당하는 <span style='background-color: #fff5b1; font-weight: 700'> 데이터 구조가 JS의 경우 호출 스택(Call Stack)이다.</span> 호출 스택은 JS가 보이지 않는곳에서 작동하는 <u>정적 데이터 구조(static data structure)</u>다. <br/>스택이므로 LIFO, 마지막에 들어온게 먼저 나간다. JS가 함수 안에 더이상 실행할 코드가 없거나 return 할 것이 없다면, 컴파일러가 스택 제일 위에꺼를 제거해서 실행한다. (개발자도구를 열어서 디버깅으로 실행하면 오른쪽에 call stack이 어떻게 작동하는지 확인할 수 있다.)</p>\n<h3 id=\"3-예제example\" style=\"position:relative;\">3. 예제(example)<a href=\"#3-%EC%98%88%EC%A0%9Cexample\" aria-label=\"3 예제example permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ol>\n<li>모든 수 더하기\n간단한 예제로 인자로 받은 수부터 시작해서 출력하는 함수다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//recursion</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">countDown_recursion</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'출력 끝남'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span>\n    <span class=\"token punctuation\">}</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">countDown_recursion</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//for loop</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">countDown_loop</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"2\">\n<li>팩토리얼 <br/>\n재귀함수의 고전적으로 설명되는 함수다. 수식으로 표현하자면 5! = 5 X 4 X 3 X 2 X 1</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//recursion</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">factorial_recursion</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//base case</span>\n    <span class=\"token keyword\">return</span> n <span class=\"token operator\">*</span> <span class=\"token function\">factorial_recursion</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//for loop</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">factorial_loop</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    result <span class=\"token operator\">*=</span> i<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>","frontmatter":{"title":"재귀(Recursion)","date":"2023.09.14.","category":"Algorithm","tag":["recursion"]}}}]}},"pageContext":{"slug":"/Algorithm/Recursion/"}},"staticQueryHashes":[],"slicesMap":{}}