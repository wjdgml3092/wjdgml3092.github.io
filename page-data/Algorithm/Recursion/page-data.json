{"componentChunkName":"component---src-templates-post-template-tsx","path":"/Algorithm/Recursion/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<h3>1. 재귀(Recursion)</h3>\n<p>재귀는 자기 자신을 호출하는 것이다. 재귀가 되기 위한 조건은 2가지가 있다. <br/></p>\n<ol>\n<li><b>Base Case</b>: 재귀가 종료되는 시점\n↳ base case가 없다면, 에러를 뱉는다. <br/>\n<code class=\"language-text\">Uncaught RangeError: Maximum call stack size exceeded</code> <br/> → 스택 오버플로 발생, 최대 호출 스택 크기를 초과한다.</li>\n<li><b>Different Input</b>: 다른 입력 값 👉🏻 함수를 호출할 때마다 다른 입력값으로 호출되어야한다.</li>\n</ol>\n<h3>2. 호출 스택(Call Stack)</h3>\n<p>재귀 함수가 자기를 계속 호출하면서 올바른 순서대로 실행이 되어야 한다. 이걸 담당하는 <span style='background-color: #fff5b1; font-weight: 700'> 데이터 구조가 JS의 경우 호출 스택(Call Stack)이다.</span> 호출 스택은 JS가 보이지 않는곳에서 작동하는 <u>정적 데이터 구조(static data structure)</u>다. <br/>스택이므로 LIFO, 마지막에 들어온게 먼저 나간다. JS가 함수 안에 더이상 실행할 코드가 없거나 return 할 것이 없다면, 컴파일러가 스택 제일 위에꺼를 제거해서 실행한다. (개발자도구를 열어서 디버깅으로 실행하면 오른쪽에 call stack이 어떻게 작동하는지 확인할 수 있다.)</p>\n<h3>3. 예제(example)</h3>\n<ol>\n<li>모든 수 더하기\n간단한 예제로 인자로 받은 수부터 시작해서 출력하는 함수다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//recursion</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">countDown_recursion</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'출력 끝남'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span>\n    <span class=\"token punctuation\">}</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">countDown_recursion</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//for loop</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">countDown_loop</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"2\">\n<li>팩토리얼 <br/>\n재귀함수의 고전적으로 설명되는 함수다. 수식으로 표현하자면 5! = 5 X 4 X 3 X 2 X 1</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//recursion</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">factorial_recursion</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//base case</span>\n    <span class=\"token keyword\">return</span> n <span class=\"token operator\">*</span> <span class=\"token function\">factorial_recursion</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//for loop</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">factorial_loop</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    result <span class=\"token operator\">*=</span> i<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>","frontmatter":{"title":"재귀(Recursion)","date":"2023.09.14.","categories":["Algorithm","JS"]}}}]}},"pageContext":{"slug":"/Algorithm/Recursion/"}},"staticQueryHashes":[],"slicesMap":{}}