{"componentChunkName":"component---src-templates-post-template-tsx","path":"/Blog/DarkModeDevelop/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<h3 id=\"개요\" style=\"position:relative;\">개요<a href=\"#%EA%B0%9C%EC%9A%94\" aria-label=\"개요 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>이번 블로그에 다크 모드를 처음 도입해보게 되었다. 쉽게 생각했던 것과 다르게 과정 중 SSR환경으로 화면 깜빡임 해결에 애를 먹엇다. 그래서 과정 정리하면서 화면 깜빡임은 어떻게 해결했는지 작성하고자한다. <br/>\n현재 블로그 기술 스택이다. 혹시 참고하실 분들은 아래 스택 확인해보세요 :) <br/>\n구현은 <code class=\"language-text\">Gatsby.js</code> <br/>\n스타일은 <code class=\"language-text\">Emotion</code></p>\n<h3 id=\"깜빡임-원인\" style=\"position:relative;\">깜빡임 원인<a href=\"#%EA%B9%9C%EB%B9%A1%EC%9E%84-%EC%9B%90%EC%9D%B8\" aria-label=\"깜빡임 원인 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>develop vs build의 차이점을 먼저 알아보자.</p>\n<p><a href=\"https://www.gatsbyjs.com/docs/conceptual/overview-of-the-gatsby-build-process/#build-time-vs-runtime\">gatsby docs</a> 요약하자면,</p>\n<blockquote>\n<p>runtime은 클릭을 통해 상호작용하는 웹브라우저에서 발생하는 프로세스라고 할 수 있다. 자바스크립트 코드는 브라우저와 상호작용할 수 있고, 브라우저가 제공하는 API를 이용할 수 있다.\ngatsby는 <span class='highlight'>초기 HTML을 로드하고, 브라우저에서 기본적으로 자바스크립트가 운영되는 런타임을 만든다.</span>\n반면에 build time은 서버 프로세스를 사용하여 후에 <span class='highlight'>웹브라우저에 전달되는 파일로 사이트를 컴파일하는 과정을 말한다.</span> 그래서 window와 같은 브라우저 API를 이용할 수 없다.</p>\n</blockquote>\n<p>develop 모드에서 다크모드를 개발할 때는 브라우저 API에 접근할 수 있으니, 깜빡임 없이 구현이 된 것 같다가 <br/> <span class='highlight'>배포 시 </span> 첫 페이지에서 테마 초기값으로 렌더링이 되었다가 클릭하여 상호작용(다음페이지 이동 등)이 일어나면서 localStorage에 저장된 값으로 테마를 적용시키게 된다.</p>\n<p><b>DOM이 구성 되기 전 테마에 대한 값을 읽어와 세팅해주는 코드가 필요하다.</b></p>\n<h3 id=\"깜빡임-해결\" style=\"position:relative;\">깜빡임 해결<a href=\"#%EA%B9%9C%EB%B9%A1%EC%9E%84-%ED%95%B4%EA%B2%B0\" aria-label=\"깜빡임 해결 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>gatsby에서는 <code class=\"language-text\">gatsby-ssr</code>파일에서 gatsby에서 제공하는 <code class=\"language-text\">onRenderBody API</code>를 이용하여 body 바로 다음 script를 붙여줘서 body 내부 엘리먼트들이 페인팅 되기 전에 실행하도록 한다.\n이렇게 하면 스크립트는 DOM 파싱을 막아 스크립트가 실행된 후 페인팅 되는 것이 보장된다.</p>\n<p><code class=\"language-text\">onRenderBody API</code>는 <code class=\"language-text\">setPreBodyComponents</code>함수를 제공하는데 이 함수를 통해 body 바로 밑에 스크립트를 넣어줄 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> scriptElement <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    dangerouslySetInnerHTML<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      __html<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n      (() => {\n        try {\n          preferredTheme = localStorage.getItem('theme');\n        } catch (err) {}\n\n        // 사용자가 dark모드인지\n        let darkQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    \n        var settingTheme = preferredTheme || (darkQuery.matches ? 'dark' : 'light');\n        \n        document.documentElement.dataset.theme = settingTheme;\n\n        localStorage.setItem('theme', settingTheme);\n      })();</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onRenderBody</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> setPreBodyComponents <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setPreBodyComponents</span><span class=\"token punctuation\">(</span>scriptElement<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"댓글-다크모드-적용-방법\" style=\"position:relative;\">댓글 다크모드 적용 방법<a href=\"#%EB%8C%93%EA%B8%80-%EB%8B%A4%ED%81%AC%EB%AA%A8%EB%93%9C-%EC%A0%81%EC%9A%A9-%EB%B0%A9%EB%B2%95\" aria-label=\"댓글 다크모드 적용 방법 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><span class='highlight'>giscus 기준 적용 방법이다.</span> useEffect 안에서 데이터 초기화할 때 테마 값은 localStorage값을 이용해준다. <br/>\n<b>로컬스토리지 변경 됐을 때 giscus 테마도 변경해야하는 부분이 포인트다.</b> 포인트라고 생각한 이유는 내 생각보다 이벤트 등록이 생각대로 적용되지 않았다. event를 강제로 실행시켜봤더니 이벤트 핸들러가 동작했고 giscus iframe에 postMessage 를 전송해 테마 설정을 변경하는 걸로 적용했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleChangeStorage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>event<span class=\"token operator\">:</span> StorageEvent<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> theme <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>key\n\n    <span class=\"token keyword\">const</span> iframe <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">querySelector</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>HTMLIFrameElement<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">'iframe.giscus-frame'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span>\n    iframe<span class=\"token operator\">?.</span>contentWindow<span class=\"token operator\">?.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span>\n      <span class=\"token punctuation\">{</span>\n        giscus<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          setConfig<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            theme<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>theme<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">_tritanopia</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'https://giscus.app'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">//댓글 컴포넌트 파일에서</span>\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'storage'</span><span class=\"token punctuation\">,</span> handleChangeStorage<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    window<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'storage'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//테마 토글 메소드 안에서</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">toggleTheme</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> newTheme <span class=\"token operator\">=</span> localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'theme'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'light'</span> <span class=\"token operator\">?</span> <span class=\"token string\">'dark'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'light'</span>\n  localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'theme'</span><span class=\"token punctuation\">,</span> newTheme<span class=\"token punctuation\">)</span>\n  document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>theme <span class=\"token operator\">=</span> newTheme\n  window<span class=\"token punctuation\">.</span><span class=\"token function\">dispatchEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">StorageEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">'storage'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> key<span class=\"token operator\">:</span> newTheme <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>개발 다 하고 보니 좋다. :3</p>","frontmatter":{"title":"gatsby블로그에 다크모드 구현 시 화면 깜빡임 해결하기","date":"2024.01.11.","category":"Blog","tag":["darkMode"]}}}]}},"pageContext":{"slug":"/Blog/DarkModeDevelop/"}},"staticQueryHashes":[],"slicesMap":{}}